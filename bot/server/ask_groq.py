import json
from docx import Document
import os
# Models

from services.groq_service import ask_groq, ask_groq_category

from db.crud import save_chat_history, get_history_text_by_session


files = {
    "–ì—Ä–∞–Ω—Ç —Ä–µ–∫—Ç–æ—Ä–∞": "–ì—Ä–∞–Ω—Ç —Ä–µ–∫—Ç–æ—Ä–∞.docx",
    "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.docx",
    "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–∂–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.docx",
    "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–ª–ª–µ–¥–∂–∞(—É—Å–∫–æ—Ä–µ–Ω–Ω–∏–∫–∏)": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–∞–∫–∞–ª–∞–≤—Ä –ø–æ—Å–ª–µ –∫–æ–ª–ª–µ–¥–∂–∞.docx",
    "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞ –ø–æ—Å–ª–µ —à–∫–æ–ª—ã": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–∞–∫–∞–ª–∞–≤—Ä –ø–æ—Å–ª–µ —à–∫–æ–ª—ã.docx",
    "–î–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã": "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã.docx",
    "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.docx",
    "–û–±—â–µ–∂–∏—Ç–∏–µ": "–æ–±—â–µ–∂–∏—Ç–∏–µ.docx",
    "–ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã –ï–ù–¢ –¥–ª—è –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞ –ø–æ—Å–ª–µ —à–∫–æ–ª—ã": "–ü—Ä–æ—Ö–æ–¥–Ω—ã–µ –±–∞–ª–ª—ã –ï–ù–¢ –ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç.docx",
    "—Å–∫–∏–¥–∫–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏—è": "—Å–∫–∏–¥–∫–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ.docx",
    "—Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": "–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¢–ê–£.docx",
    "–¶–µ–Ω—ã –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ": "–¶–µ–Ω—ã.docx",
    "–¢–≤–æ—Ä—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã": "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã.docx",
}


async def ask_ai(query, uuid, platform="Telegram"):
    session_id = uuid
    history_text = await get_history_text_by_session(session_id)
    categories = await categorize_query(query, history_text)
    if categories == "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò" or categories == "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON":
        return "üß† –û—Ç–≤–µ—Ç –æ—Ç –ò–ò:\n" + "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
    elif categories == "–ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏":
        return "üß† –û—Ç–≤–µ—Ç –æ—Ç –ò–ò:\n" + "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –æ–±–ª–∞–¥–∞—é —Ç–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"
    else:

        response = await ask_groq(history_text, query, categories)
        if response.strip():
            try:
                parsed_response = json.loads(response)
                if parsed_response.get("answer") == "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞":
                    await save_chat_history(session_id=session_id, query=query, response="–ë–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–µ–º–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏",
                                            platform="Telegram")
                    return "üß† –û—Ç–≤–µ—Ç –æ—Ç –ò–ò:\n" + " –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –æ–±–ª–∞–¥–∞—é —Ç–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"
                if "answer" in parsed_response:
                    answer_value = parsed_response["answer"]
                    await save_chat_history(session_id=session_id, query=query, response=answer_value,
                                            platform="Telegram")
                    return "üß† –û—Ç–≤–µ—Ç –æ—Ç –ò–ò:\n" + answer_value
            except:
                pass
        await save_chat_history(session_id=session_id, query=query, response=response, platform=platform)
        return response


async def categorize_query(query, history_text):
    response = await ask_groq_category(query, history_text)
    print(response)
    if response.strip():
        try:
            parsed_response = json.loads(response)

            category = parsed_response.get("category", {})
            data = ""

            for title_key, value in category.items():
                file_path = f"C:\\Users\\admin\\PycharmProjects\\AIChatBot-Admission\\bot\\services\\info\\{files[value]}"

                if os.path.exists(file_path):
                    doc = Document(file_path)
                    text = '\n'.join([para.text for para in doc.paragraphs])
                    data += text
                    data += "\n"
                else:
                    print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")  # –∏–ª–∏ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
            return data

        except json.JSONDecodeError as e:
            return response
        except KeyError as e:
            return response
        except AttributeError as e:
            return response
    else:
        return response
