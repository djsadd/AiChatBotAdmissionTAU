from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Router, types, F
import uuid

# Models

from bot.keyboards.main_menu import main_menu_ru_exit_bot, main_menu_ru
from datetime import datetime, timedelta
from bot.server.ask_groq import ask_ai
router = Router()


class ChatWithAI(StatesGroup):
    waiting_for_question = State()


@router.message(F.text == "üí¨ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò")
async def ask_ai_mode(message: types.Message, state: FSMContext):
    session_id = str(uuid.uuid4())
    await state.update_data(session_id=session_id)
    await state.set_state(ChatWithAI.waiting_for_question)

    await message.answer(
        "ü§ñ –í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –ò–ò.\n –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.\n\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ <b>–≤—ã—Ö–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ"
        " –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª–∏ –≤—ã–±–æ—Ä–∞ '–í—ã—Ö–æ–¥ —Å –ò–ò –∞–≥–µ–Ω—Ç–∞ </b>.",
        parse_mode="HTML", reply_markup=main_menu_ru_exit_bot)


@router.message(ChatWithAI.waiting_for_question)
async def handle_ai_question(message: Message, state: FSMContext):
    user_data = await state.get_data()
    now = datetime.utcnow()
    session_id = user_data.get("session_id")
    last_request_time = user_data.get("last_ai_request")

    if message.text.lower() in ["–≤—ã—Ö–æ–¥", "üí¨ –≤—ã—Ö–æ–¥ —Å —Ä–µ–∂–∏–º–∞ –∏–∏"]:
        await state.clear()
        await message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò. –í–æ–∑–≤—Ä–∞—â–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_ru)
        return

    if last_request_time:
        last_request_time = datetime.fromisoformat(last_request_time)
        if now - last_request_time < timedelta(seconds=10):
            remaining = timedelta(seconds=10) - (now - last_request_time)
            seconds_left = int(remaining.total_seconds())
            await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {seconds_left} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ –ò–ò.")
            return

    await state.update_data(last_ai_request=now.isoformat())

    query = message.text
    await message.answer("üß† –î—É–º–∞—é...\n")

    response_clean = await ask_ai(query, session_id)
    await message.answer("üß† –û—Ç–≤–µ—Ç –æ—Ç –ò–ò:\n" + response_clean + (" \n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ò–ò, –Ω–∞–ø–∏—à–∏—Ç–µ –≤—ã—Ö–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –ø–∞–Ω–µ–ª–∏"
                                        "–≤—ã–±–æ—Ä–∞ '–í—ã—Ö–æ–¥ —Å –ò–ò –∞–≥–µ–Ω—Ç–∞'"))
