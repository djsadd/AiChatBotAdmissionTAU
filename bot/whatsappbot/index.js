const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');

const client = new Client({
    authStrategy: new LocalAuth(),
    puppeteer: {
        headless: false,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    }
});

const RATE_LIMIT_MS = 10000; // 10 —Å–µ–∫—É–Ω–¥
const UUID_UPDATE_INTERVAL = 60 * 60 * 1000; // 1 —á–∞—Å
const MESSAGE_LIMIT = 5; // –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π

const lastRequestTime = {};
const userData = {}; // { –Ω–æ–º–µ—Ä: { uuid, lastUpdated, messageCount } }

client.on('qr', (qr) => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤!');
});

client.on('message', async message => {
    const sender = message.from;
    const now = Date.now();

    if (sender.endsWith('@g.us')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!userData[sender]) {
        userData[sender] = {
            uuid: uuidv4(),
            lastUpdated: now,
            messageCount: 0
        };
    }

    const user = userData[sender];

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UUID –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const shouldUpdateUUID =
        now - user.lastUpdated >= UUID_UPDATE_INTERVAL || user.messageCount >= MESSAGE_LIMIT;

    if (shouldUpdateUUID) {
        user.uuid = uuidv4();
        user.lastUpdated = now;
        user.messageCount = 0;
        console.log(`üîÑ –ù–æ–≤—ã–π UUID –¥–ª—è ${sender}: ${user.uuid}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    if (lastRequestTime[sender] && (now - lastRequestTime[sender]) < RATE_LIMIT_MS) {
        const remaining = ((RATE_LIMIT_MS - (now - lastRequestTime[sender])) / 1000).toFixed(1);
        await message.reply(`‚è± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â—ë ${remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.`);
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    lastRequestTime[sender] = now;
    user.messageCount += 1;

    console.log(`üì® ${sender}: ${message.body} (UUID: ${user.uuid})`);

    try {
        const response = await axios.post('http://127.0.0.1:8000/ask_ai/', {
            query: message.body,
            platform: 'Whatsapp',
            uuid: user.uuid
        });

        const aiReply = response.data.answer;
        await message.reply(`ü§ñ ${aiReply}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ FastAPI:', error.message);
        await message.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-—Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

client.initialize();
